import "./memory"
import "./string"

import "./linux/syscalls"
import "./macos/syscalls"

#[target_os = "darwin"]
namespace std {
    extern fn printf(const i8*, ...) : i32;
    extern fn scanf(const i8*, ...) : i32;

    fn print(str: const i8*) {
        macos::syscalls::write(1, str, std::strlen(str));
        macos::syscalls::write(1, "\n", 1);
    }

    fn print(str: const i8*, new_line: bool) {
        macos::syscalls::write(1, str, std::strlen(str));

        if new_line macos::syscalls::write(1, "\n", 1);;
    }

    alias scan = scanf;
}

#[target_os = "linux"]
namespace std {
    fn print(str: const i8*) {
        linux::syscalls::write(1, str, std::strlen(str));
        linux::syscalls::write(1, "\n", 1);
    }
    
    fn print(str: const i8*, new_line: bool) {
        linux::syscalls::write(1, str, std::strlen(str));
    
        if new_line linux::syscalls::write(1, "\n", 1);
    }

}

#[target_os = "windows"]
namespace std {
    extern fn WriteConsoleA(i8*, i8*, u64, u64*, void*) : bool;
    extern fn ReadConsoleA(i8*, i8*, u64, u64*, void*) : bool;
    extern fn GetStdHandle(u64): i8*;

    fn print(str: const i8*) {
        let handle = GetStdHandle(-11);
        let count = std::memory::allocate<u64>(1);

        WriteConsoleA(handle, str, std::strlen(str), count, null);
        WriteConsoleA(handle, "\n", 1 as u64, count, null);

        std::memory::deallocate(count);
    }

    fn print(str: const i8*) {
        let handle = GetStdHandle(-11);
        let count = std::memory::allocate<u64>(1);

        WriteConsoleA(handle, str, std::strlen(str), count, null);

        if new_line WriteConsoleA(handle, "\n", 1 as u64, count, null);
        std::memory::deallocate(count);
    }

    fn scan() : std::string {
        let handle = GetStdHandle(-10);
        let ptr = std::memory::allocate<i8>(4096);

        let read: u64 = 0;
        ReadConsoleA(handle, ptr, 4096, &read, null);

        let str = string::new(ptr, read - 1);

        std::memory::deallocate(ptr);

        return str;
    }
}

namespace std {
    fn print(n: i64) {
        print(std::to_string(n));
    }

    fn print(n: i32) {
        print(std::to_string(n));
    }

    fn print(n: i16) {
        print(std::to_string(n));
    }

    fn print(n: i8) {
        print(std::to_string(n));
    }

    fn print(b: bool) {
        print(b ? "true" : "false");
    }

    fn print(n: f32) {
        print(std::to_string(n));
    }

    fn print(n: f64) {
        print(std::to_string(n));
    }

    fn print(str: const std::string&) {
        print(str.ptr);
    }
}
